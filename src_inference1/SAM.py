# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/01_models.ipynb.


__all__ = [
    "seg_models",
    "get_smp_model",
    "dice_coef",
    "SMPModel",
    "DictLossWrapper",
    "MLPBlock",
    "LayerNorm2d",
    "Block",
    "Attention",
    "window_partition",
    "window_unpartition",
    "get_rel_pos",
    "add_decomposed_rel_pos",
    "PatchEmbed",
    "icnr_init",
    "PixelShuffle_ICNR",
    "FPN",
    "UnetBlock",
    "UpBlock",
    "TTA",
    "TTAi",
    "ImageEncoderViTSEQ",
    "ImageEncoderViTSignle",
    "get_sam_encoderv1",
    "get_sam_encoderv2",
    "ChannelAttention",
    "SpatialAttention",
    "UpSampleWithAttention",
    "ImageEncoderViTSignleSA",
    "get_sam_encoderv3",
    "ImageEncoderViTSignleSAV1",
    "get_sam_encoderv4",
    "ImageEncoderViTSignleSAV2",
    "get_sam_encoderv5",
    "DownSampleWithAttention",
    "ImageEncoderViTSignleSAV3",
    "get_sam_encoderv6",
    "LSTM_block",
    "SAMLSTMV0",
    "SAM_U",
    "SAM_USA",
    "SAM_UV1",
    "SAM_UV2",
    "SAM_UV3",
]

import segmentation_models_pytorch as smp
import torch
import torch.nn as nn
import torch.nn.functional as F
from functools import partial
from typing import Optional, Tuple, Type

class MLPBlock(nn.Module):
    def __init__(
        self,
        embedding_dim: int,
        mlp_dim: int,
        act: Type[nn.Module] = nn.GELU,
    ) -> None:
        super().__init__()
        self.lin1 = nn.Linear(embedding_dim, mlp_dim)
        self.lin2 = nn.Linear(mlp_dim, embedding_dim)
        self.act = act()

    def forward(self, x: torch.Tensor) -> torch.Tensor:
        return self.lin2(self.act(self.lin1(x)))

# From https://github.com/facebookresearch/detectron2/blob/main/detectron2/layers/batch_norm.py # noqa
# Itself from https://github.com/facebookresearch/ConvNeXt/blob/d1fa8f6fef0a165b27399986cc2bdacc92777e40/models/convnext.py#L119  # noqa
class LayerNorm2d(nn.Module):
    def __init__(self, num_channels: int, eps: float = 1e-6) -> None:
        super().__init__()
        self.weight = nn.Parameter(torch.ones(num_channels))
        self.bias = nn.Parameter(torch.zeros(num_channels))
        self.eps = eps

    def forward(self, x: torch.Tensor) -> torch.Tensor:
        u = x.mean(1, keepdim=True)
        s = (x - u).pow(2).mean(1, keepdim=True)
        x = (x - u) / torch.sqrt(s + self.eps)
        x = self.weight[:, None, None] * x + self.bias[:, None, None]
        return x


class Block(nn.Module):
    """Transformer blocks with support of window attention and residual propagation blocks"""

    def __init__(
        self,
        dim: int,
        num_heads: int,
        mlp_ratio: float = 4.0,
        qkv_bias: bool = True,
        norm_layer: Type[nn.Module] = nn.LayerNorm,
        act_layer: Type[nn.Module] = nn.GELU,
        use_rel_pos: bool = False,
        rel_pos_zero_init: bool = True,
        window_size: int = 0,
        input_size: Optional[Tuple[int, int]] = None,
    ) -> None:
        """
        Args:
            dim (int): Number of input channels.
            num_heads (int): Number of attention heads in each ViT block.
            mlp_ratio (float): Ratio of mlp hidden dim to embedding dim.
            qkv_bias (bool): If True, add a learnable bias to query, key, value.
            norm_layer (nn.Module): Normalization layer.
            act_layer (nn.Module): Activation layer.
            use_rel_pos (bool): If True, add relative positional embeddings to the attention map.
            rel_pos_zero_init (bool): If True, zero initialize relative positional parameters.
            window_size (int): Window size for window attention blocks. If it equals 0, then
                use global attention.
            input_size (tuple(int, int) or None): Input resolution for calculating the relative
                positional parameter size.
        """
        super().__init__()
        self.norm1 = norm_layer(dim)
        self.attn = Attention(
            dim,
            num_heads=num_heads,
            qkv_bias=qkv_bias,
            use_rel_pos=use_rel_pos,
            rel_pos_zero_init=rel_pos_zero_init,
            input_size=input_size if window_size == 0 else (window_size, window_size),
        )

        self.norm2 = norm_layer(dim)
        self.mlp = MLPBlock(
            embedding_dim=dim, mlp_dim=int(dim * mlp_ratio), act=act_layer
        )

        self.window_size = window_size

    def forward(self, x: torch.Tensor) -> torch.Tensor:
        shortcut = x
        x = self.norm1(x)
        # Window partition
        if self.window_size > 0:
            H, W = x.shape[1], x.shape[2]
            x, pad_hw = window_partition(x, self.window_size)

        x = self.attn(x)
        # Reverse window partition
        if self.window_size > 0:
            x = window_unpartition(x, self.window_size, pad_hw, (H, W))

        x = shortcut + x
        x = x + self.mlp(self.norm2(x))

        return x


class Attention(nn.Module):
    """Multi-head Attention block with relative position embeddings."""

    def __init__(
        self,
        dim: int,
        num_heads: int = 8,
        qkv_bias: bool = True,
        use_rel_pos: bool = False,
        rel_pos_zero_init: bool = True,
        input_size: Optional[Tuple[int, int]] = None,
    ) -> None:
        """
        Args:
            dim (int): Number of input channels.
            num_heads (int): Number of attention heads.
            qkv_bias (bool):  If True, add a learnable bias to query, key, value.
            rel_pos (bool): If True, add relative positional embeddings to the attention map.
            rel_pos_zero_init (bool): If True, zero initialize relative positional parameters.
            input_size (tuple(int, int) or None): Input resolution for calculating the relative
                positional parameter size.
        """
        super().__init__()
        self.num_heads = num_heads
        head_dim = dim // num_heads
        self.scale = head_dim**-0.5

        self.qkv = nn.Linear(dim, dim * 3, bias=qkv_bias)
        self.proj = nn.Linear(dim, dim)

        self.use_rel_pos = use_rel_pos
        if self.use_rel_pos:
            assert (
                input_size is not None
            ), "Input size must be provided if using relative positional encoding."
            # initialize relative positional embeddings
            self.rel_pos_h = nn.Parameter(torch.zeros(2 * input_size[0] - 1, head_dim))
            self.rel_pos_w = nn.Parameter(torch.zeros(2 * input_size[1] - 1, head_dim))

    def forward(self, x: torch.Tensor) -> torch.Tensor:
        B, H, W, _ = x.shape
        # qkv with shape (3, B, nHead, H * W, C)
        qkv = (
            self.qkv(x).reshape(B, H * W, 3, self.num_heads, -1).permute(2, 0, 3, 1, 4)
        )
        # q, k, v with shape (B * nHead, H * W, C)
        q, k, v = qkv.reshape(3, B * self.num_heads, H * W, -1).unbind(0)

        attn = (q * self.scale) @ k.transpose(-2, -1)

        if self.use_rel_pos:
            attn = add_decomposed_rel_pos(
                attn, q, self.rel_pos_h, self.rel_pos_w, (H, W), (H, W)
            )

        attn = attn.softmax(dim=-1)
        x = (
            (attn @ v)
            .view(B, self.num_heads, H, W, -1)
            .permute(0, 2, 3, 1, 4)
            .reshape(B, H, W, -1)
        )
        x = self.proj(x)

        return x


def window_partition(
    x: torch.Tensor, window_size: int
) -> Tuple[torch.Tensor, Tuple[int, int]]:
    """
    Partition into non-overlapping windows with padding if needed.
    Args:
        x (tensor): input tokens with [B, H, W, C].
        window_size (int): window size.

    Returns:
        windows: windows after partition with [B * num_windows, window_size, window_size, C].
        (Hp, Wp): padded height and width before partition
    """
    B, H, W, C = x.shape

    pad_h = (window_size - H % window_size) % window_size
    pad_w = (window_size - W % window_size) % window_size
    if pad_h > 0 or pad_w > 0:
        x = F.pad(x, (0, 0, 0, pad_w, 0, pad_h))
    Hp, Wp = H + pad_h, W + pad_w

    x = x.view(B, Hp // window_size, window_size, Wp // window_size, window_size, C)
    windows = (
        x.permute(0, 1, 3, 2, 4, 5).contiguous().view(-1, window_size, window_size, C)
    )
    return windows, (Hp, Wp)


def window_unpartition(
    windows: torch.Tensor,
    window_size: int,
    pad_hw: Tuple[int, int],
    hw: Tuple[int, int],
) -> torch.Tensor:
    """
    Window unpartition into original sequences and removing padding.
    Args:
        windows (tensor): input tokens with [B * num_windows, window_size, window_size, C].
        window_size (int): window size.
        pad_hw (Tuple): padded height and width (Hp, Wp).
        hw (Tuple): original height and width (H, W) before padding.

    Returns:
        x: unpartitioned sequences with [B, H, W, C].
    """
    Hp, Wp = pad_hw
    H, W = hw
    B = windows.shape[0] // (Hp * Wp // window_size // window_size)
    x = windows.view(
        B, Hp // window_size, Wp // window_size, window_size, window_size, -1
    )
    x = x.permute(0, 1, 3, 2, 4, 5).contiguous().view(B, Hp, Wp, -1)

    if Hp > H or Wp > W:
        x = x[:, :H, :W, :].contiguous()
    return x


def get_rel_pos(q_size: int, k_size: int, rel_pos: torch.Tensor) -> torch.Tensor:
    """
    Get relative positional embeddings according to the relative positions of
        query and key sizes.
    Args:
        q_size (int): size of query q.
        k_size (int): size of key k.
        rel_pos (Tensor): relative position embeddings (L, C).

    Returns:
        Extracted positional embeddings according to relative positions.
    """
    max_rel_dist = int(2 * max(q_size, k_size) - 1)
    # Interpolate rel pos if needed.
    if rel_pos.shape[0] != max_rel_dist:
        # Interpolate rel pos.
        rel_pos_resized = F.interpolate(
            rel_pos.reshape(1, rel_pos.shape[0], -1).permute(0, 2, 1),
            size=max_rel_dist,
            mode="linear",
        )
        rel_pos_resized = rel_pos_resized.reshape(-1, max_rel_dist).permute(1, 0)
    else:
        rel_pos_resized = rel_pos

    # Scale the coords with short length if shapes for q and k are different.
    q_coords = torch.arange(q_size)[:, None] * max(k_size / q_size, 1.0)
    k_coords = torch.arange(k_size)[None, :] * max(q_size / k_size, 1.0)
    relative_coords = (q_coords - k_coords) + (k_size - 1) * max(q_size / k_size, 1.0)

    return rel_pos_resized[relative_coords.long()]


def add_decomposed_rel_pos(
    attn: torch.Tensor,
    q: torch.Tensor,
    rel_pos_h: torch.Tensor,
    rel_pos_w: torch.Tensor,
    q_size: Tuple[int, int],
    k_size: Tuple[int, int],
) -> torch.Tensor:
    """
    Calculate decomposed Relative Positional Embeddings from :paper:`mvitv2`.
    https://github.com/facebookresearch/mvit/blob/19786631e330df9f3622e5402b4a419a263a2c80/mvit/models/attention.py   # noqa B950
    Args:
        attn (Tensor): attention map.
        q (Tensor): query q in the attention layer with shape (B, q_h * q_w, C).
        rel_pos_h (Tensor): relative position embeddings (Lh, C) for height axis.
        rel_pos_w (Tensor): relative position embeddings (Lw, C) for width axis.
        q_size (Tuple): spatial sequence size of query q with (q_h, q_w).
        k_size (Tuple): spatial sequence size of key k with (k_h, k_w).

    Returns:
        attn (Tensor): attention map with added relative positional embeddings.
    """
    q_h, q_w = q_size
    k_h, k_w = k_size
    Rh = get_rel_pos(q_h, k_h, rel_pos_h)
    Rw = get_rel_pos(q_w, k_w, rel_pos_w)

    B, _, dim = q.shape
    r_q = q.reshape(B, q_h, q_w, dim)
    rel_h = torch.einsum("bhwc,hkc->bhwk", r_q, Rh)
    rel_w = torch.einsum("bhwc,wkc->bhwk", r_q, Rw)

    attn = (
        attn.view(B, q_h, q_w, k_h, k_w)
        + rel_h[:, :, :, :, None]
        + rel_w[:, :, :, None, :]
    ).view(B, q_h * q_w, k_h * k_w)

    return attn


class PatchEmbed(nn.Module):
    """
    Image to Patch Embedding.
    """

    def __init__(
        self,
        kernel_size: Tuple[int, int] = (16, 16),
        stride: Tuple[int, int] = (16, 16),
        padding: Tuple[int, int] = (0, 0),
        in_chans: int = 3,
        embed_dim: int = 768,
    ) -> None:
        """
        Args:
            kernel_size (Tuple): kernel size of the projection layer.
            stride (Tuple): stride of the projection layer.
            padding (Tuple): padding size of the projection layer.
            in_chans (int): Number of input image channels.
            embed_dim (int): Patch embedding dimension.
        """
        super().__init__()

        self.proj = nn.Conv2d(
            in_chans, embed_dim, kernel_size=kernel_size, stride=stride, padding=padding
        )

    def forward(self, x: torch.Tensor) -> torch.Tensor:
        x = self.proj(x)
        # B C H W -> B H W C
        x = x.permute(0, 2, 3, 1)
        return x


from collections import OrderedDict


class LayerNorm2d(nn.Module):
    def __init__(self, num_channels: int, eps: float = 1e-6) -> None:
        super().__init__()
        self.weight = nn.Parameter(torch.ones(num_channels))
        self.bias = nn.Parameter(torch.zeros(num_channels))
        self.eps = eps

    def forward(self, x: torch.Tensor) -> torch.Tensor:
        u = x.mean(1, keepdim=True)
        s = (x - u).pow(2).mean(1, keepdim=True)
        x = (x - u) / torch.sqrt(s + self.eps)
        x = self.weight[:, None, None] * x + self.bias[:, None, None]
        return x


def icnr_init(x, scale=2, init=nn.init.kaiming_normal_):
    "ICNR init of `x`, with `scale` and `init` function"
    ni, nf, h, w = x.shape
    ni2 = int(ni / (scale**2))
    k = init(x.new_zeros([ni2, nf, h, w])).transpose(0, 1)
    k = k.contiguous().view(ni2, nf, -1)
    k = k.repeat(1, 1, scale**2)
    return k.contiguous().view([nf, ni, h, w]).transpose(0, 1)


class PixelShuffle_ICNR(nn.Sequential):
    def __init__(self, ni, nf=None, scale=2, blur=True):
        super().__init__()
        nf = ni if nf is None else nf
        layers = [
            nn.Conv2d(ni, nf * (scale**2), 1),
            LayerNorm2d(nf * (scale**2)),
            nn.GELU(),
            nn.PixelShuffle(scale),
        ]
        layers[0].weight.data.copy_(icnr_init(layers[0].weight.data))
        if blur:
            layers += [nn.ReplicationPad2d((1, 0, 1, 0)), nn.AvgPool2d(2, stride=1)]
        super().__init__(*layers)


class FPN(nn.Module):
    def __init__(self, input_channels: list, output_channels: list):
        super().__init__()
        self.convs = nn.ModuleList(
            [
                nn.Sequential(
                    nn.Conv2d(in_ch, out_ch * 2, kernel_size=3, padding=1),
                    nn.GELU(),
                    LayerNorm2d(out_ch * 2),
                    nn.Conv2d(out_ch * 2, out_ch, kernel_size=3, padding=1),
                )
                for in_ch, out_ch in zip(input_channels, output_channels)
            ]
        )

    def forward(self, xs: list, last_layer):
        hcs = [
            F.interpolate(
                c(x), scale_factor=2 ** (len(self.convs) - i), mode="bilinear"
            )
            for i, (c, x) in enumerate(zip(self.convs, xs))
        ]
        hcs.append(last_layer)
        return torch.cat(hcs, dim=1)


class UnetBlock(nn.Module):
    def __init__(
        self, up_in_c: int, x_in_c: int, nf: int = None, blur: bool = False, **kwargs
    ):
        super().__init__()
        self.shuf = PixelShuffle_ICNR(up_in_c, up_in_c // 2, blur=blur, **kwargs)
        self.bn = LayerNorm2d(x_in_c)
        ni = up_in_c // 2 + x_in_c
        nf = nf if nf is not None else max(up_in_c // 2, 32)
        self.conv1 = nn.Sequential(nn.Conv2d(ni, nf, 3, padding=1), nn.GELU())
        self.conv2 = nn.Sequential(nn.Conv2d(nf, nf, 3, padding=1), nn.GELU())
        self.relu = nn.GELU()

    def forward(self, up_in: torch.Tensor, left_in: torch.Tensor) -> torch.Tensor:
        s = left_in
        up_out = self.shuf(up_in)
        cat_x = self.relu(torch.cat([up_out, self.bn(s)], dim=1))
        return self.conv2(self.conv1(cat_x))


class UpBlock(nn.Module):
    def __init__(self, up_in_c: int, nf: int = None, blur: bool = True, **kwargs):
        super().__init__()
        ni = up_in_c // 4
        self.shuf = PixelShuffle_ICNR(up_in_c, ni, blur=blur, **kwargs)
        nf = nf if nf is not None else max(up_in_c // 4, 16)
        self.conv = nn.Sequential(
            nn.Conv2d(ni, ni, 3, padding=1),
            LayerNorm2d(ni) if ni >= 16 else nn.Identity(),
            nn.GELU(),
            nn.Conv2d(ni, nf, 1),
        )

    def forward(self, up_in: torch.Tensor) -> torch.Tensor:
        return self.conv(self.shuf(up_in))


def TTA(x, i=0):
    if i % 2 == 1:
        x = x.flip(-1)
    if (i // 2) % 2 == 1:
        x = x.flip(-2)
    if (i // 4) % 2 == 1:
        x = torch.transpose(x, -1, -2)
    return x


def TTAi(x, i=0):
    if (i // 4) % 2 == 1:
        x = torch.transpose(x, -1, -2)
    if i % 2 == 1:
        x = x.flip(-1)
    if (i // 2) % 2 == 1:
        x = x.flip(-2)
    return x


class ImageEncoderViTSEQ(nn.Module):
    def __init__(
        self,
        img_size: int = 1024,
        patch_size: int = 16,
        in_chans: int = 3,
        embed_dim: int = 768,
        depth: int = 12,
        num_heads: int = 12,
        mlp_ratio: float = 4.0,
        out_chans: int = 256,
        qkv_bias: bool = True,
        norm_layer: Type[nn.Module] = nn.LayerNorm,
        act_layer: Type[nn.Module] = nn.GELU,
        use_abs_pos: bool = True,
        use_rel_pos: bool = False,
        rel_pos_zero_init: bool = True,
        window_size: int = 0,
        global_attn_indexes: Tuple[int, ...] = (),
    ) -> None:
        """
        Args:
            img_size (int): Input image size.
            patch_size (int): Patch size.
            in_chans (int): Number of input image channels.
            embed_dim (int): Patch embedding dimension.
            depth (int): Depth of ViT.
            num_heads (int): Number of attention heads in each ViT block.
            mlp_ratio (float): Ratio of mlp hidden dim to embedding dim.
            qkv_bias (bool): If True, add a learnable bias to query, key, value.
            norm_layer (nn.Module): Normalization layer.
            act_layer (nn.Module): Activation layer.
            use_abs_pos (bool): If True, use absolute positional embeddings.
            use_rel_pos (bool): If True, add relative positional embeddings to the attention map.
            rel_pos_zero_init (bool): If True, zero initialize relative positional parameters.
            window_size (int): Window size for window attention blocks.
            global_attn_indexes (list): Indexes for blocks using global attention.
        """
        super().__init__()
        self.img_size = img_size

        self.patch_embed = PatchEmbed(
            kernel_size=(patch_size, patch_size),
            stride=(patch_size, patch_size),
            in_chans=in_chans,
            embed_dim=embed_dim,
        )

        self.pos_embed: Optional[nn.Parameter] = None
        if use_abs_pos:
            # Initialize absolute positional embedding with pretrain image size.
            self.pos_embed = nn.Parameter(
                torch.zeros(
                    1, img_size // patch_size, img_size // patch_size, embed_dim
                )
            )

        self.blocks = nn.ModuleList()

        for i in range(depth):
            block = Block(
                dim=embed_dim,
                num_heads=num_heads,
                mlp_ratio=mlp_ratio,
                qkv_bias=qkv_bias,
                norm_layer=norm_layer,
                act_layer=act_layer,
                use_rel_pos=use_rel_pos,
                rel_pos_zero_init=rel_pos_zero_init,
                window_size=window_size if i not in global_attn_indexes else 0,
                input_size=(img_size // patch_size, img_size // patch_size),
            )
            self.blocks.append(block)

        self.neck = nn.Sequential(
            nn.Conv2d(
                embed_dim,
                out_chans,
                kernel_size=1,
                bias=False,
            ),
            LayerNorm2d(out_chans),
            nn.Conv2d(
                out_chans,
                out_chans,
                kernel_size=3,
                padding=1,
                bias=False,
            ),
            LayerNorm2d(out_chans),
        )

    def get_features(self, x: torch.Tensor) -> torch.Tensor:
        x = self.patch_embed(x)
        if self.pos_embed is not None:
            x = x + self.pos_embed
        for blk in self.blocks:
            x = blk(x)

        x = self.neck(x.permute(0, 3, 1, 2))
        return x

    def forward(self, x) -> torch.Tensor:
        x1 = self.get_features(x[:, :, 0])
        x2 = self.get_features(x[:, :, 1])
        x3 = self.get_features(x[:, :, 2])
        x4 = self.get_features(x[:, :, 3])
        x5 = self.get_features(x[:, :, 4])
        return torch.stack([x1, x2, x3, x4, x5], 1)


class ImageEncoderViTSignle(nn.Module):
    def __init__(
        self,
        img_size: int = 1024,
        patch_size: int = 16,
        in_chans: int = 3,
        embed_dim: int = 768,
        depth: int = 12,
        num_heads: int = 12,
        mlp_ratio: float = 4.0,
        out_chans: int = 256,
        qkv_bias: bool = True,
        norm_layer: Type[nn.Module] = nn.LayerNorm,
        act_layer: Type[nn.Module] = nn.GELU,
        use_abs_pos: bool = True,
        use_rel_pos: bool = False,
        rel_pos_zero_init: bool = True,
        window_size: int = 0,
        global_attn_indexes: Tuple[int, ...] = (),
    ) -> None:
        """
        Args:
            img_size (int): Input image size.
            patch_size (int): Patch size.
            in_chans (int): Number of input image channels.
            embed_dim (int): Patch embedding dimension.
            depth (int): Depth of ViT.
            num_heads (int): Number of attention heads in each ViT block.
            mlp_ratio (float): Ratio of mlp hidden dim to embedding dim.
            qkv_bias (bool): If True, add a learnable bias to query, key, value.
            norm_layer (nn.Module): Normalization layer.
            act_layer (nn.Module): Activation layer.
            use_abs_pos (bool): If True, use absolute positional embeddings.
            use_rel_pos (bool): If True, add relative positional embeddings to the attention map.
            rel_pos_zero_init (bool): If True, zero initialize relative positional parameters.
            window_size (int): Window size for window attention blocks.
            global_attn_indexes (list): Indexes for blocks using global attention.
        """
        super().__init__()
        self.img_size = img_size

        self.patch_embed = PatchEmbed(
            kernel_size=(patch_size, patch_size),
            stride=(patch_size, patch_size),
            in_chans=in_chans,
            embed_dim=embed_dim,
        )

        self.pos_embed: Optional[nn.Parameter] = None
        if use_abs_pos:
            # Initialize absolute positional embedding with pretrain image size.
            self.pos_embed = nn.Parameter(
                torch.zeros(
                    1, img_size // patch_size, img_size // patch_size, embed_dim
                )
            )

        self.blocks = nn.ModuleList()

        for i in range(depth):
            block = Block(
                dim=embed_dim,
                num_heads=num_heads,
                mlp_ratio=mlp_ratio,
                qkv_bias=qkv_bias,
                norm_layer=norm_layer,
                act_layer=act_layer,
                use_rel_pos=use_rel_pos,
                rel_pos_zero_init=rel_pos_zero_init,
                window_size=window_size if i not in global_attn_indexes else 0,
                input_size=(img_size // patch_size, img_size // patch_size),
            )
            self.blocks.append(block)

        self.neck = nn.Sequential(
            nn.Conv2d(
                embed_dim,
                out_chans,
                kernel_size=1,
                bias=False,
            ),
            LayerNorm2d(out_chans),
            nn.Conv2d(
                out_chans,
                out_chans,
                kernel_size=3,
                padding=1,
                bias=False,
            ),
            LayerNorm2d(out_chans),
        )

        self.compress_vit_feat = nn.Sequential(
            nn.ConvTranspose2d(768, 256, kernel_size=2, stride=2),
            LayerNorm2d(256),
            nn.GELU(),
            nn.ConvTranspose2d(256, 256 // 8, kernel_size=1, stride=1),
        )

        self.embedding_encoder = nn.Sequential(
            nn.ConvTranspose2d(256, 256 // 4, kernel_size=2, stride=2),
            LayerNorm2d(256 // 4),
            nn.GELU(),
            nn.ConvTranspose2d(256 // 4, 256 // 8, kernel_size=1, stride=1),
        )

        self.compress_vit_feat_v1 = nn.Sequential(
            nn.Conv2d(
                768,
                512,
                kernel_size=1,
                stride=2,
                bias=False,
            ),
            LayerNorm2d(
                512,
            ),
            nn.GELU(),
        )

        self.neck_3 = nn.Sequential(
            nn.Conv2d(
                embed_dim,
                out_chans * 3,
                kernel_size=1,
                bias=False,
            ),
            LayerNorm2d(out_chans * 3),
            nn.Conv2d(
                out_chans * 3,
                out_chans * 3,
                kernel_size=3,
                padding=1,
                stride=4,
                bias=False,
            ),
            LayerNorm2d(out_chans * 3),
        )

    def forward(self, x: torch.Tensor) -> torch.Tensor:
        x = self.patch_embed(x)
        if self.pos_embed is not None:
            x = x + self.pos_embed
        interm_embeddings = []
        for blk in self.blocks:
            x = blk(x)
            if blk.window_size == 0:
                interm_embeddings.append(x)

        x = self.neck(x.permute(0, 3, 1, 2))

        top_features = self.embedding_encoder(x) + self.compress_vit_feat(
            interm_embeddings[0].permute(0, 3, 1, 2)
        )
        top_features_v1 = self.compress_vit_feat_v1(
            interm_embeddings[1].permute(0, 3, 1, 2)
        )
        top_features_v2 = self.neck_3(
            torch.stack(interm_embeddings, 0).mean(0).permute(0, 3, 1, 2)
        )
        return [top_features, x, top_features_v1, top_features_v2]


def get_sam_encoderv1():
    encoder_embed_dim = 768
    encoder_depth = 12
    encoder_num_heads = 12
    encoder_global_attn_indexes = [2, 5, 8, 11]
    image_size = 1024
    vit_patch_size = 16
    prompt_embed_dim = 256
    image_encoder = ImageEncoderViTSEQ(
        depth=encoder_depth,
        embed_dim=encoder_embed_dim,
        img_size=image_size,
        mlp_ratio=4,
        norm_layer=partial(torch.nn.LayerNorm, eps=1e-6),
        num_heads=encoder_num_heads,
        patch_size=vit_patch_size,
        qkv_bias=True,
        use_rel_pos=True,
        global_attn_indexes=encoder_global_attn_indexes,
        window_size=14,
        out_chans=prompt_embed_dim,
    )
    return image_encoder


def get_sam_encoderv2():
    encoder_embed_dim = 768
    encoder_depth = 12
    encoder_num_heads = 12
    encoder_global_attn_indexes = [2, 5, 8, 11]
    image_size = 1024
    vit_patch_size = 16
    prompt_embed_dim = 256
    image_encoder = ImageEncoderViTSignle(
        depth=encoder_depth,
        embed_dim=encoder_embed_dim,
        img_size=image_size,
        mlp_ratio=4,
        norm_layer=partial(torch.nn.LayerNorm, eps=1e-6),
        num_heads=encoder_num_heads,
        patch_size=vit_patch_size,
        qkv_bias=True,
        use_rel_pos=True,
        global_attn_indexes=encoder_global_attn_indexes,
        window_size=14,
        out_chans=prompt_embed_dim,
    )
    return image_encoder


class ChannelAttention(nn.Module):
    def __init__(self, in_planes, ratio=16):
        super(ChannelAttention, self).__init__()
        self.avg_pool = nn.AdaptiveAvgPool2d(1)
        self.max_pool = nn.AdaptiveMaxPool2d(1)

        self.fc = nn.Sequential(
            nn.Conv2d(in_planes, in_planes // 16, 1, bias=False),
            nn.ReLU(),
            nn.Conv2d(in_planes // 16, in_planes, 1, bias=False),
        )
        self.sigmoid = nn.Sigmoid()

    def forward(self, x):
        avg_out = self.fc(self.avg_pool(x))
        max_out = self.fc(self.max_pool(x))
        out = avg_out + max_out
        return self.sigmoid(out)


class SpatialAttention(nn.Module):
    def __init__(self, kernel_size=7):
        super(SpatialAttention, self).__init__()

        self.conv1 = nn.Conv2d(2, 1, kernel_size, padding=kernel_size // 2, bias=False)
        self.sigmoid = nn.Sigmoid()

    def forward(self, x):
        avg_out = torch.mean(x, dim=1, keepdim=True)
        max_out, _ = torch.max(x, dim=1, keepdim=True)
        x = torch.cat([avg_out, max_out], dim=1)
        x = self.conv1(x)
        return self.sigmoid(x)


class UpSampleWithAttention(nn.Module):
    def __init__(self, cin, nf):
        super().__init__()
        self.convolution = nn.Sequential(
            nn.Conv2d(cin, nf, kernel_size=3, padding=1),
            LayerNorm2d(nf),
            nn.GELU(),
            nn.Conv2d(nf, nf, kernel_size=3, padding=1),
            LayerNorm2d(nf),
            nn.GELU(),
        )
        self.upsample = nn.Upsample(scale_factor=2, mode="bilinear", align_corners=True)
        self.ca = ChannelAttention(nf)
        self.sa = SpatialAttention()

    def forward(self, x):
        x = self.upsample(x)
        x = self.convolution(x)
        ca = self.ca(x)
        x = ca * x
        sa = self.sa(x)
        x = sa * x
        return x


class ImageEncoderViTSignleSA(nn.Module):
    def __init__(
        self,
        img_size: int = 1024,
        patch_size: int = 16,
        in_chans: int = 3,
        embed_dim: int = 768,
        depth: int = 12,
        num_heads: int = 12,
        mlp_ratio: float = 4.0,
        out_chans: int = 256,
        qkv_bias: bool = True,
        norm_layer: Type[nn.Module] = nn.LayerNorm,
        act_layer: Type[nn.Module] = nn.GELU,
        use_abs_pos: bool = True,
        use_rel_pos: bool = False,
        rel_pos_zero_init: bool = True,
        window_size: int = 0,
        global_attn_indexes: Tuple[int, ...] = (),
    ) -> None:
        """
        Args:
            img_size (int): Input image size.
            patch_size (int): Patch size.
            in_chans (int): Number of input image channels.
            embed_dim (int): Patch embedding dimension.
            depth (int): Depth of ViT.
            num_heads (int): Number of attention heads in each ViT block.
            mlp_ratio (float): Ratio of mlp hidden dim to embedding dim.
            qkv_bias (bool): If True, add a learnable bias to query, key, value.
            norm_layer (nn.Module): Normalization layer.
            act_layer (nn.Module): Activation layer.
            use_abs_pos (bool): If True, use absolute positional embeddings.
            use_rel_pos (bool): If True, add relative positional embeddings to the attention map.
            rel_pos_zero_init (bool): If True, zero initialize relative positional parameters.
            window_size (int): Window size for window attention blocks.
            global_attn_indexes (list): Indexes for blocks using global attention.
        """
        super().__init__()
        self.img_size = img_size

        self.patch_embed = PatchEmbed(
            kernel_size=(patch_size, patch_size),
            stride=(patch_size, patch_size),
            in_chans=in_chans,
            embed_dim=embed_dim,
        )

        self.pos_embed: Optional[nn.Parameter] = None
        if use_abs_pos:
            # Initialize absolute positional embedding with pretrain image size.
            self.pos_embed = nn.Parameter(
                torch.zeros(
                    1, img_size // patch_size, img_size // patch_size, embed_dim
                )
            )

        self.blocks = nn.ModuleList()

        for i in range(depth):
            block = Block(
                dim=embed_dim,
                num_heads=num_heads,
                mlp_ratio=mlp_ratio,
                qkv_bias=qkv_bias,
                norm_layer=norm_layer,
                act_layer=act_layer,
                use_rel_pos=use_rel_pos,
                rel_pos_zero_init=rel_pos_zero_init,
                window_size=window_size if i not in global_attn_indexes else 0,
                input_size=(img_size // patch_size, img_size // patch_size),
            )
            self.blocks.append(block)

        self.neck = nn.Sequential(
            nn.Conv2d(
                embed_dim,
                out_chans,
                kernel_size=1,
                bias=False,
            ),
            LayerNorm2d(out_chans),
            nn.Conv2d(
                out_chans,
                out_chans,
                kernel_size=3,
                padding=1,
                bias=False,
            ),
            LayerNorm2d(out_chans),
        )

        self.compress_vit_feat = UpSampleWithAttention(768, 256 // 8)
        self.embedding_encoder = UpSampleWithAttention(256, 256 // 8)
        self.compress_vit_feat_v1 = nn.Sequential(
            nn.Conv2d(
                768,
                512,
                kernel_size=1,
                stride=2,
                bias=False,
            ),
            LayerNorm2d(
                512,
            ),
            nn.GELU(),
        )

        self.neck_3 = nn.Sequential(
            nn.Conv2d(
                embed_dim,
                out_chans * 3,
                kernel_size=1,
                bias=False,
            ),
            LayerNorm2d(out_chans * 3),
            nn.Conv2d(
                out_chans * 3,
                out_chans * 3,
                kernel_size=3,
                padding=1,
                stride=4,
                bias=False,
            ),
            LayerNorm2d(out_chans * 3),
        )

    def forward(self, x: torch.Tensor) -> torch.Tensor:
        x = self.patch_embed(x)
        if self.pos_embed is not None:
            x = x + self.pos_embed
        interm_embeddings = []
        for blk in self.blocks:
            x = blk(x)
            if blk.window_size == 0:
                interm_embeddings.append(x)

        x = self.neck(x.permute(0, 3, 1, 2))
        top_features = self.embedding_encoder(x) + self.compress_vit_feat(
            interm_embeddings[0].permute(0, 3, 1, 2)
        )
        top_features_v1 = self.compress_vit_feat_v1(
            interm_embeddings[1].permute(0, 3, 1, 2)
        )
        top_features_v2 = self.neck_3(
            torch.stack(interm_embeddings, 0).mean(0).permute(0, 3, 1, 2)
        )
        return [top_features, x, top_features_v1, top_features_v2]


def get_sam_encoderv3():
    encoder_embed_dim = 768
    encoder_depth = 12
    encoder_num_heads = 12
    encoder_global_attn_indexes = [2, 5, 8, 11]
    image_size = 1024
    vit_patch_size = 16
    prompt_embed_dim = 256
    image_encoder = ImageEncoderViTSignleSA(
        depth=encoder_depth,
        embed_dim=encoder_embed_dim,
        img_size=image_size,
        mlp_ratio=4,
        norm_layer=partial(torch.nn.LayerNorm, eps=1e-6),
        num_heads=encoder_num_heads,
        patch_size=vit_patch_size,
        qkv_bias=True,
        use_rel_pos=True,
        global_attn_indexes=encoder_global_attn_indexes,
        window_size=14,
        out_chans=prompt_embed_dim,
    )
    return image_encoder


class ImageEncoderViTSignleSAV1(nn.Module):
    def __init__(
        self,
        img_size: int = 1024,
        patch_size: int = 16,
        in_chans: int = 3,
        embed_dim: int = 768,
        depth: int = 12,
        num_heads: int = 12,
        mlp_ratio: float = 4.0,
        out_chans: int = 256,
        qkv_bias: bool = True,
        norm_layer: Type[nn.Module] = nn.LayerNorm,
        act_layer: Type[nn.Module] = nn.GELU,
        use_abs_pos: bool = True,
        use_rel_pos: bool = False,
        rel_pos_zero_init: bool = True,
        window_size: int = 0,
        global_attn_indexes: Tuple[int, ...] = (),
    ) -> None:
        """
        Args:
            img_size (int): Input image size.
            patch_size (int): Patch size.
            in_chans (int): Number of input image channels.
            embed_dim (int): Patch embedding dimension.
            depth (int): Depth of ViT.
            num_heads (int): Number of attention heads in each ViT block.
            mlp_ratio (float): Ratio of mlp hidden dim to embedding dim.
            qkv_bias (bool): If True, add a learnable bias to query, key, value.
            norm_layer (nn.Module): Normalization layer.
            act_layer (nn.Module): Activation layer.
            use_abs_pos (bool): If True, use absolute positional embeddings.
            use_rel_pos (bool): If True, add relative positional embeddings to the attention map.
            rel_pos_zero_init (bool): If True, zero initialize relative positional parameters.
            window_size (int): Window size for window attention blocks.
            global_attn_indexes (list): Indexes for blocks using global attention.
        """
        super().__init__()
        self.img_size = img_size

        self.patch_embed = PatchEmbed(
            kernel_size=(patch_size, patch_size),
            stride=(patch_size, patch_size),
            in_chans=in_chans,
            embed_dim=embed_dim,
        )

        self.pos_embed: Optional[nn.Parameter] = None
        if use_abs_pos:
            # Initialize absolute positional embedding with pretrain image size.
            self.pos_embed = nn.Parameter(
                torch.zeros(
                    1, img_size // patch_size, img_size // patch_size, embed_dim
                )
            )

        self.blocks = nn.ModuleList()

        for i in range(depth):
            block = Block(
                dim=embed_dim,
                num_heads=num_heads,
                mlp_ratio=mlp_ratio,
                qkv_bias=qkv_bias,
                norm_layer=norm_layer,
                act_layer=act_layer,
                use_rel_pos=use_rel_pos,
                rel_pos_zero_init=rel_pos_zero_init,
                window_size=window_size if i not in global_attn_indexes else 0,
                input_size=(img_size // patch_size, img_size // patch_size),
            )
            self.blocks.append(block)

        self.neck = nn.Sequential(
            nn.Conv2d(
                embed_dim,
                out_chans,
                kernel_size=1,
                bias=False,
            ),
            LayerNorm2d(out_chans),
            nn.Conv2d(
                out_chans,
                out_chans,
                kernel_size=3,
                padding=1,
                bias=False,
            ),
            LayerNorm2d(out_chans),
        )

        self.compress_vit_feat = UpSampleWithAttention(768, 256 // 8)
        self.embedding_encoder = UpSampleWithAttention(256, 256 // 8)
        self.compress_vit_feat_v1 = nn.Sequential(
            nn.Conv2d(
                768,
                512,
                kernel_size=1,
                stride=2,
                bias=False,
            ),
            LayerNorm2d(
                512,
            ),
            nn.GELU(),
        )

        self.neck_3 = nn.Sequential(
            nn.Conv2d(
                embed_dim,
                out_chans * 3,
                kernel_size=1,
                bias=False,
            ),
            LayerNorm2d(out_chans * 3),
            nn.Conv2d(
                out_chans * 3,
                out_chans * 3,
                kernel_size=3,
                padding=1,
                stride=4,
                bias=False,
            ),
            LayerNorm2d(out_chans * 3),
        )

    def forward(self, x: torch.Tensor) -> torch.Tensor:
        x = self.patch_embed(x)
        if self.pos_embed is not None:
            x = x + self.pos_embed
        interm_embeddings = []
        for blk in self.blocks:
            x = blk(x)
            if blk.window_size == 0:
                interm_embeddings.append(x)

        x = self.neck(x.permute(0, 3, 1, 2))
        top_features = self.embedding_encoder(x) + self.compress_vit_feat(
            interm_embeddings[0].permute(0, 3, 1, 2)
        )
        top_features_v1 = self.compress_vit_feat_v1(
            interm_embeddings[1].permute(0, 3, 1, 2)
        )
        top_features_v2 = self.neck_3(
            torch.stack(interm_embeddings, 0).mean(0).permute(0, 3, 1, 2)
        )
        return [top_features, x, top_features_v1, top_features_v2]


def get_sam_encoderv4():
    encoder_embed_dim = 768
    encoder_depth = 12
    encoder_num_heads = 12
    encoder_global_attn_indexes = [2, 5, 8, 11]
    image_size = 1024
    vit_patch_size = 16
    prompt_embed_dim = 256
    image_encoder = ImageEncoderViTSignleSAV1(
        depth=encoder_depth,
        embed_dim=encoder_embed_dim,
        img_size=image_size,
        mlp_ratio=4,
        norm_layer=partial(torch.nn.LayerNorm, eps=1e-6),
        num_heads=encoder_num_heads,
        patch_size=vit_patch_size,
        qkv_bias=True,
        use_rel_pos=True,
        global_attn_indexes=encoder_global_attn_indexes,
        window_size=14,
        out_chans=prompt_embed_dim,
    )
    return image_encoder


class ImageEncoderViTSignleSAV2(nn.Module):
    def __init__(
        self,
        img_size: int = 1024,
        patch_size: int = 16,
        in_chans: int = 3,
        embed_dim: int = 768,
        depth: int = 12,
        num_heads: int = 12,
        mlp_ratio: float = 4.0,
        out_chans: int = 256,
        qkv_bias: bool = True,
        norm_layer: Type[nn.Module] = nn.LayerNorm,
        act_layer: Type[nn.Module] = nn.GELU,
        use_abs_pos: bool = True,
        use_rel_pos: bool = False,
        rel_pos_zero_init: bool = True,
        window_size: int = 0,
        global_attn_indexes: Tuple[int, ...] = (),
    ) -> None:
        """
        Args:
            img_size (int): Input image size.
            patch_size (int): Patch size.
            in_chans (int): Number of input image channels.
            embed_dim (int): Patch embedding dimension.
            depth (int): Depth of ViT.
            num_heads (int): Number of attention heads in each ViT block.
            mlp_ratio (float): Ratio of mlp hidden dim to embedding dim.
            qkv_bias (bool): If True, add a learnable bias to query, key, value.
            norm_layer (nn.Module): Normalization layer.
            act_layer (nn.Module): Activation layer.
            use_abs_pos (bool): If True, use absolute positional embeddings.
            use_rel_pos (bool): If True, add relative positional embeddings to the attention map.
            rel_pos_zero_init (bool): If True, zero initialize relative positional parameters.
            window_size (int): Window size for window attention blocks.
            global_attn_indexes (list): Indexes for blocks using global attention.
        """
        super().__init__()
        self.img_size = img_size

        self.patch_embed = PatchEmbed(
            kernel_size=(patch_size, patch_size),
            stride=(patch_size, patch_size),
            in_chans=in_chans,
            embed_dim=embed_dim,
        )

        self.pos_embed: Optional[nn.Parameter] = None
        if use_abs_pos:
            # Initialize absolute positional embedding with pretrain image size.
            self.pos_embed = nn.Parameter(
                torch.zeros(
                    1, img_size // patch_size, img_size // patch_size, embed_dim
                )
            )

        self.blocks = nn.ModuleList()

        for i in range(depth):
            block = Block(
                dim=embed_dim,
                num_heads=num_heads,
                mlp_ratio=mlp_ratio,
                qkv_bias=qkv_bias,
                norm_layer=norm_layer,
                act_layer=act_layer,
                use_rel_pos=use_rel_pos,
                rel_pos_zero_init=rel_pos_zero_init,
                window_size=window_size if i not in global_attn_indexes else 0,
                input_size=(img_size // patch_size, img_size // patch_size),
            )
            self.blocks.append(block)

        self.neck = nn.Sequential(
            nn.Conv2d(
                embed_dim,
                out_chans,
                kernel_size=1,
                bias=False,
            ),
            LayerNorm2d(out_chans),
            nn.Conv2d(
                out_chans,
                out_chans,
                kernel_size=3,
                padding=1,
                bias=False,
            ),
            LayerNorm2d(out_chans),
        )

        self.compress_vit_feat = UpSampleWithAttention(768, 256 // 8)
        self.embedding_encoder = UpSampleWithAttention(256, 256 // 8)
        self.compress_vit_feat_v1 = nn.Sequential(
            nn.Conv2d(
                768,
                512,
                kernel_size=1,
                stride=2,
                bias=False,
            ),
            LayerNorm2d(
                512,
            ),
            nn.GELU(),
        )

        self.neck_3 = nn.Sequential(
            nn.Conv2d(
                embed_dim * 2,
                out_chans * 3,
                kernel_size=1,
                bias=False,
            ),
            LayerNorm2d(out_chans * 3),
            nn.GELU(),
            nn.Conv2d(
                out_chans * 3,
                out_chans * 3,
                kernel_size=3,
                padding=1,
                stride=4,
                bias=False,
            ),
            LayerNorm2d(out_chans * 3),
        )

    def forward(self, x: torch.Tensor) -> torch.Tensor:
        x = self.patch_embed(x)
        if self.pos_embed is not None:
            x = x + self.pos_embed
        interm_embeddings = []
        for blk in self.blocks:
            x = blk(x)
            if blk.window_size == 0:
                interm_embeddings.append(x)

        x = self.neck(x.permute(0, 3, 1, 2))
        top_features = self.embedding_encoder(x) + self.compress_vit_feat(
            interm_embeddings[0].permute(0, 3, 1, 2)
        )
        top_features_v1 = self.compress_vit_feat_v1(
            interm_embeddings[1].permute(0, 3, 1, 2)
        )
        top_features_v2 = self.neck_3(
            torch.concat([interm_embeddings[2], interm_embeddings[3]], -1).permute(
                0, 3, 1, 2
            )
        )
        return [top_features, x, top_features_v1, top_features_v2]


def get_sam_encoderv5():
    encoder_embed_dim = 768
    encoder_depth = 12
    encoder_num_heads = 12
    encoder_global_attn_indexes = [2, 5, 8, 11]
    image_size = 1024
    vit_patch_size = 16
    prompt_embed_dim = 256
    image_encoder = ImageEncoderViTSignleSAV2(
        depth=encoder_depth,
        embed_dim=encoder_embed_dim,
        img_size=image_size,
        mlp_ratio=4,
        norm_layer=partial(torch.nn.LayerNorm, eps=1e-6),
        num_heads=encoder_num_heads,
        patch_size=vit_patch_size,
        qkv_bias=True,
        use_rel_pos=True,
        global_attn_indexes=encoder_global_attn_indexes,
        window_size=14,
        out_chans=prompt_embed_dim,
    )
    return image_encoder


class DownSampleWithAttention(nn.Module):
    def __init__(self, nc, nf, pool=False, pool_chn=2):
        super().__init__()
        if pool:
            self.convolution = nn.Sequential(
                nn.Conv2d(nc, nf, kernel_size=3, padding=1),
                LayerNorm2d(nf),
                nn.GELU(),
                nn.Conv2d(nf, nf, kernel_size=3, padding=1),
                LayerNorm2d(nf),
                nn.GELU(),
                nn.AvgPool2d(pool_chn),
            )
        else:
            self.convolution = nn.Sequential(
                nn.Conv2d(nc, nf, kernel_size=3, padding=1),
                LayerNorm2d(nf),
                nn.GELU(),
                nn.Conv2d(nf, nf, kernel_size=3, padding=1),
                LayerNorm2d(nf),
                nn.GELU(),
            )

        self.ca = ChannelAttention(nf)
        self.sa = SpatialAttention()

    def forward(self, x):
        x = self.convolution(x)
        ca = self.ca(x)
        x = ca * x
        sa = self.sa(x)
        x = sa * x
        return x


class ImageEncoderViTSignleSAV3(nn.Module):
    def __init__(
        self,
        img_size: int = 1024,
        patch_size: int = 16,
        in_chans: int = 3,
        embed_dim: int = 768,
        depth: int = 12,
        num_heads: int = 12,
        mlp_ratio: float = 4.0,
        out_chans: int = 256,
        qkv_bias: bool = True,
        norm_layer: Type[nn.Module] = nn.LayerNorm,
        act_layer: Type[nn.Module] = nn.GELU,
        use_abs_pos: bool = True,
        use_rel_pos: bool = False,
        rel_pos_zero_init: bool = True,
        window_size: int = 0,
        global_attn_indexes: Tuple[int, ...] = (),
    ) -> None:
        """
        Args:
            img_size (int): Input image size.
            patch_size (int): Patch size.
            in_chans (int): Number of input image channels.
            embed_dim (int): Patch embedding dimension.
            depth (int): Depth of ViT.
            num_heads (int): Number of attention heads in each ViT block.
            mlp_ratio (float): Ratio of mlp hidden dim to embedding dim.
            qkv_bias (bool): If True, add a learnable bias to query, key, value.
            norm_layer (nn.Module): Normalization layer.
            act_layer (nn.Module): Activation layer.
            use_abs_pos (bool): If True, use absolute positional embeddings.
            use_rel_pos (bool): If True, add relative positional embeddings to the attention map.
            rel_pos_zero_init (bool): If True, zero initialize relative positional parameters.
            window_size (int): Window size for window attention blocks.
            global_attn_indexes (list): Indexes for blocks using global attention.
        """
        super().__init__()
        self.img_size = img_size

        self.patch_embed = PatchEmbed(
            kernel_size=(patch_size, patch_size),
            stride=(patch_size, patch_size),
            in_chans=in_chans,
            embed_dim=embed_dim,
        )

        self.pos_embed: Optional[nn.Parameter] = None
        if use_abs_pos:
            # Initialize absolute positional embedding with pretrain image size.
            self.pos_embed = nn.Parameter(
                torch.zeros(
                    1, img_size // patch_size, img_size // patch_size, embed_dim
                )
            )

        self.blocks = nn.ModuleList()

        for i in range(depth):
            block = Block(
                dim=embed_dim,
                num_heads=num_heads,
                mlp_ratio=mlp_ratio,
                qkv_bias=qkv_bias,
                norm_layer=norm_layer,
                act_layer=act_layer,
                use_rel_pos=use_rel_pos,
                rel_pos_zero_init=rel_pos_zero_init,
                window_size=window_size if i not in global_attn_indexes else 0,
                input_size=(img_size // patch_size, img_size // patch_size),
            )
            self.blocks.append(block)

        self.neck = DownSampleWithAttention(embed_dim, out_chans, False)
        self.compress_vit_feat = UpSampleWithAttention(768, 256 // 8)
        self.embedding_encoder = UpSampleWithAttention(256, 256 // 8)
        self.compress_vit_feat_v1 = DownSampleWithAttention(768, 512, True)
        self.neck_3 = DownSampleWithAttention(embed_dim * 2, out_chans * 3, True, 4)

    def forward(self, x: torch.Tensor) -> torch.Tensor:
        x = self.patch_embed(x)
        if self.pos_embed is not None:
            x = x + self.pos_embed
        interm_embeddings = []
        for blk in self.blocks:
            x = blk(x)
            if blk.window_size == 0:
                interm_embeddings.append(x)

        x = self.neck(x.permute(0, 3, 1, 2))
        top_features = self.embedding_encoder(x) + self.compress_vit_feat(
            interm_embeddings[0].permute(0, 3, 1, 2)
        )
        top_features_v1 = self.compress_vit_feat_v1(
            interm_embeddings[1].permute(0, 3, 1, 2)
        )
        top_features_v2 = self.neck_3(
            torch.concat([interm_embeddings[2], interm_embeddings[3]], -1).permute(
                0, 3, 1, 2
            )
        )
        return [top_features, x, top_features_v1, top_features_v2]


def get_sam_encoderv6():
    encoder_embed_dim = 768
    encoder_depth = 12
    encoder_num_heads = 12
    encoder_global_attn_indexes = [2, 5, 8, 11]
    image_size = 1024
    vit_patch_size = 16
    prompt_embed_dim = 256
    image_encoder = ImageEncoderViTSignleSAV3(
        depth=encoder_depth,
        embed_dim=encoder_embed_dim,
        img_size=image_size,
        mlp_ratio=4,
        norm_layer=partial(torch.nn.LayerNorm, eps=1e-6),
        num_heads=encoder_num_heads,
        patch_size=vit_patch_size,
        qkv_bias=True,
        use_rel_pos=True,
        global_attn_indexes=encoder_global_attn_indexes,
        window_size=14,
        out_chans=prompt_embed_dim,
    )
    return image_encoder


# %% ../nbs/01_models.ipynb 7
class LSTM_block(nn.Module):
    def __init__(self, n, **kwargs):
        super().__init__()
        self.lstm = nn.LSTM(n, n, batch_first=True, bidirectional=False, num_layers=1)

    def forward(self, x):
        s = x.shape
        x = x.flatten(-2, -1).permute(0, 3, 1, 2).flatten(0, 1)
        x = self.lstm(x)[0]
        x = x.view(-1, s[3], s[4], s[1], s[2]).permute(0, 3, 4, 1, 2)
        return x


class SAMLSTMV0(nn.Module):
    def __init__(self, ps=0, num_classes=1, up_result=2, **kwargs):
        super().__init__()
        self.image_encoder = get_sam_encoderv1()
        self.lstm = nn.Sequential(LSTM_block(256))
        nc = [256, 256, 256, 256]
        self.decoder = SegFormerHead(nc, 256)
        self.final_conv = nn.Sequential(
            PixelShuffle_ICNR(
                self.decoder.embedding_dim, self.decoder.embedding_dim // 4
            ),
            nn.Dropout2d(ps),
            nn.Conv2d(self.decoder.embedding_dim // 4, num_classes, 3, padding=1),
        )
        self.up_result, self.tta = up_result, tta

    def features(self, x):
        x = self.image_encoder(x)
        x = [x[:, -1], x[:, -2], x[:, -3], self.lstm(x)[:, -1]]
        x = self.decoder(x)
        return x

    def forward(self, x):
        x = self.features(x)
        if self.up_result != 0:
            x = F.interpolate(
                self.final_conv(x),
                scale_factor=self.up_result,
                mode="bilinear",
                align_corners=False,
            )
        x = torch.nan_to_num(x)
        return x


class SAM_U(nn.Module):
    def __init__(self, pre=None, arch="large", num_classes=1, ps=0, **kwargs):
        super().__init__()
        in_chans = 3
        nc = [32, 256, 512, 768]
        self.image_encoder = get_sam_encoderv2()
        self.dec4 = UnetBlock(nc[-1], nc[-2], 384)
        self.dec3 = UnetBlock(384, nc[-3], 192)
        self.dec2 = UnetBlock(192, nc[-4], 96)
        self.fpn = FPN([nc[-1], 384, 192], [32] * 3)
        self.drop = nn.Dropout2d(ps)
        self.final_conv = nn.Sequential(UpBlock(96 + 32 * 3, num_classes, blur=True))
        self.up_result = 1

    def forward(self, x):
        if len(x.shape) == 5: x = x[:, :, 4]
        x = F.interpolate(x,scale_factor=4,mode='bicubic').clip(0,1)
        encs = self.image_encoder(x)
        dec4 = encs[-1]
        dec3 = self.dec4(dec4, encs[-2])
        dec2 = self.dec3(dec3, encs[-3])
        dec1 = self.dec2(dec2, encs[-4])
        x = self.fpn([dec4, dec3, dec2], dec1)
        x = self.final_conv(self.drop(x))
        if self.up_result != 1:
            x = F.interpolate(x, scale_factor=self.up_result, mode="bilinear")
        x = torch.nan_to_num(x)
        return x


class SAM_USA(nn.Module):
    def __init__(self, pre=None, arch="large", num_classes=1, ps=0, **kwargs):
        super().__init__()
        in_chans = 3
        self.image_encoder = get_sam_encoderv3()
        self.dec = smp.decoders.unetplusplus.decoder.UnetPlusPlusDecoder(
            encoder_channels=[1, 32, 256, 512, 768],
            decoder_channels=[768, 512, 256, 32],
            n_blocks=4,
            use_batchnorm=False,
        )
        self.drop = nn.Dropout2d(ps)
        self.final_conv = nn.Conv2d(
            32,
            num_classes,
            kernel_size=(3, 3),
            stride=(1, 1),
            padding=(1, 1),
        )
        self.up_result = 1

    def forward(self, x):
        if len(x.shape) == 5: x = x[:, :, 4]
        x = F.interpolate(x,scale_factor=4,mode='bicubic').clip(0,1)
        encs = [0] + self.image_encoder(x)
        x = self.dec(*encs)
        x = self.final_conv(self.drop(x))
        if self.up_result != 1:
            x = F.interpolate(x, scale_factor=self.up_result, mode="bilinear")
        x = torch.nan_to_num(x)
        return x


class SAM_UV1(nn.Module):
    def __init__(self, pre=None, arch="large", num_classes=1, ps=0, **kwargs):
        super().__init__()
        in_chans = 3
        nc = [32, 256, 512, 768]
        self.image_encoder = get_sam_encoderv4()
        self.dec4 = UnetBlock(nc[-1], nc[-2], 384)
        self.dec3 = UnetBlock(384, nc[-3], 192)
        self.dec2 = UnetBlock(192, nc[-4], 96)
        self.fpn = FPN([nc[-1], 384, 192], [32] * 3)
        self.drop = nn.Dropout2d(ps)
        self.final_conv = nn.Sequential(UpBlock(96 + 32 * 3, num_classes, blur=True))
        self.up_result = 1

    def forward(self, x):
        if len(x.shape) == 5: x = x[:, :, 4]
        x = F.interpolate(x,scale_factor=4,mode='bicubic').clip(0,1)
        encs = self.image_encoder(x)
        dec4 = encs[-1]
        dec3 = self.dec4(dec4, encs[-2])
        dec2 = self.dec3(dec3, encs[-3])
        dec1 = self.dec2(dec2, encs[-4])
        x = self.fpn([dec4, dec3, dec2], dec1)
        x = self.final_conv(self.drop(x))
        if self.up_result != 1:
            x = F.interpolate(x, scale_factor=self.up_result, mode="bilinear")
        x = torch.nan_to_num(x)
        return x


class SAM_UV2(nn.Module):
    def __init__(self, pre=None, arch="large", num_classes=1, ps=0, **kwargs):
        super().__init__()
        in_chans = 3
        nc = [32, 256, 512, 768]
        self.image_encoder = get_sam_encoderv5()
        self.dec4 = UnetBlock(nc[-1], nc[-2], 384)
        self.dec3 = UnetBlock(384, nc[-3], 192)
        self.dec2 = UnetBlock(192, nc[-4], 96)
        self.fpn = FPN([nc[-1], 384, 192], [32] * 3)
        self.drop = nn.Dropout2d(ps)
        self.final_conv = nn.Sequential(UpBlock(96 + 32 * 3, num_classes, blur=True))
        self.up_result = 1

    def forward(self, x):
        if len(x.shape) == 5: x = x[:, :, 4]
        x = F.interpolate(x,scale_factor=4,mode='bicubic').clip(0,1)
        encs = self.image_encoder(x)
        dec4 = encs[-1]
        dec3 = self.dec4(dec4, encs[-2])
        dec2 = self.dec3(dec3, encs[-3])
        dec1 = self.dec2(dec2, encs[-4])
        x = self.fpn([dec4, dec3, dec2], dec1)
        x = self.final_conv(self.drop(x))
        if self.up_result != 1:
            x = F.interpolate(x, scale_factor=self.up_result, mode="bilinear")
        x = torch.nan_to_num(x)
        return x


class SAM_UV3(nn.Module):
    def __init__(self, pre=None, arch="large", num_classes=1, ps=0, **kwargs):
        super().__init__()
        in_chans = 3
        nc = [32, 256, 512, 768]
        self.image_encoder = get_sam_encoderv6()
        self.dec4 = UnetBlock(nc[-1], nc[-2], 384)
        self.dec3 = UnetBlock(384, nc[-3], 192)
        self.dec2 = UnetBlock(192, nc[-4], 96)
        self.fpn = FPN([nc[-1], 384, 192], [32] * 3)
        self.drop = nn.Dropout2d(ps)
        self.final_conv = nn.Sequential(UpBlock(96 + 32 * 3, num_classes, blur=True))
        self.up_result = 1

    def forward(self, x):
        if len(x.shape) == 5: x = x[:, :, 4]
        x = F.interpolate(x,scale_factor=4,mode='bicubic').clip(0,1)
        encs = self.image_encoder(x)
        dec4 = encs[-1]
        dec3 = self.dec4(dec4, encs[-2])
        dec2 = self.dec3(dec3, encs[-3])
        dec1 = self.dec2(dec2, encs[-4])
        x = self.fpn([dec4, dec3, dec2], dec1)
        x = self.final_conv(self.drop(x))
        if self.up_result != 1:
            x = F.interpolate(x, scale_factor=self.up_result, mode="bilinear")
        x = torch.nan_to_num(x)
        return x

